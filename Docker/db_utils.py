import json
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

from models import CurrentMetric, Measurement, Alert, User
from database import db
import logging
logger = logging.getLogger(__name__)
# ‚ö†Ô∏è Id√©alement, lis ces valeurs depuis des variables d'environnement
ADMIN_EMAIL = "noe.gavillet@gmail.com"      # Fallback si aucun abonn√©
SENDER_EMAIL = "noe.gavillet@gmail.com"     # Compte SMTP utilis√© pour l'envoi
APP_PASSWORD = "outjcrsikfnyasim"           # Mot de passe d‚Äôapplication


def _get_alert_recipients() -> list[str]:
    """
    R√©cup√®re les emails des utilisateurs actifs qui souhaitent recevoir les alertes.
    Renvoie une liste d√©dupliqu√©e, nettoy√©e.
    """
    try:
        users = User.query.filter_by(receive_alerts=True, is_active=True).all()
        emails = {
            (u.email or "").strip().lower()
            for u in users
            if u.email and u.email.strip()
        }
        return sorted(emails)
    except Exception as e:
        print(f"[email] ‚ö†Ô∏è Impossible de r√©cup√©rer les destinataires: {e}")
        return []


def send_alert_email(subject: str, body: str, to: list[str] | None = None) -> bool:
    """
    Envoie un email d'alerte via Gmail SMTP (TLS 587).
    - to = liste explicite de destinataires (optionnel).
    - Si 'to' n'est pas fourni, on utilise les utilisateurs abonn√©s (receive_alerts=1).
      S'il n'y en a aucun, fallback sur ADMIN_EMAIL.
    Retourne True si OK, False sinon.
    """
    if not APP_PASSWORD:
        print("[email] ‚ö†Ô∏è Mot de passe d'application manquant.")
        return False

    recipients = to if to is not None else _get_alert_recipients()
    if not recipients:
        # Fallback : on pr√©vient au moins l'admin.
        print("[email] ‚ÑπÔ∏è Aucun utilisateur abonn√© aux alertes ‚Äî fallback admin.")
        recipients = [ADMIN_EMAIL]

    msg = MIMEMultipart()
    msg["From"] = SENDER_EMAIL
    msg["To"] = ", ".join(recipients)
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain", "utf-8"))

    try:
        with smtplib.SMTP("smtp.gmail.com", 587, timeout=15) as server:
            server.ehlo()
            server.starttls()
            server.ehlo()
            server.login(SENDER_EMAIL, APP_PASSWORD)
            # sendmail garantit l'envoi √† la liste compl√®te
            server.sendmail(SENDER_EMAIL, recipients, msg.as_string())
            print(f"[email] ‚úÖ Alerte envoy√©e √†: {', '.join(recipients)}")
            return True
    except Exception as e:
        print(f"[email] ‚ùå Erreur envoi mail: {e}")
        return False


def upsert_current_metric(db, host_id, oid, metric, value, meta=None):
    """Ins√®re ou met √† jour la derni√®re valeur connue d'une m√©trique pour un host."""
    if isinstance(meta, (dict, list)):
        meta = json.dumps(meta, ensure_ascii=False)
    if isinstance(value, (dict, list)):
        value = json.dumps(value, ensure_ascii=False)

    existing = CurrentMetric.query.filter_by(host_id=host_id, oid=oid).first()
    if existing:
        existing.value = value
        existing.metric = metric
        existing.ts = datetime.utcnow()
        existing.meta = meta
    else:
        db.session.add(CurrentMetric(
            host_id=host_id,
            oid=oid,
            metric=metric,
            value=value,
            meta=meta
        ))
    db.session.commit()


def open_alert(db, Alert, host_id, severity, message, cooldown_minutes=10):
    """
    Cr√©e une alerte si aucune alerte identique (m√™me host + m√™me "type" de message)
    n'existe r√©cemment. N'envoie un mail que pour les CRITICAL, et applique un
    cooldown anti-spam (par d√©faut 10 min) m√™me si l'ancienne alerte est close.
    """
    from models import Host
    host = Host.query.get(host_id)
    hostname = host.hostname if host else f"Host#{host_id}"
    host_ip = host.ip if host else "IP inconnue"

    # üö´ Pas de mail pour les warnings
    send_email = (severity == "critical")

    # Cl√© de similarit√© "douce" : 1er mot du message (ex: "CPU", "RAM", "Stockage", "SNMP")
    # -> garde ton comportement actuel mais un poil plus robuste.
    first_word = (message or "").strip().split()[0] if message else ""
    now = datetime.utcnow()
    since = now - timedelta(minutes=cooldown_minutes)

    # üîç 1) Si une alerte identique NON R√âSOLUE existe d√©j√† ‚Üí on ne spam pas
    existing_open = (
        Alert.query.filter_by(host_id=host_id, severity=severity)
        .filter(Alert.resolved_at.is_(None))
        .filter(Alert.message.like(f"{first_word}%"))
        .first()
    )
    if existing_open:
        logger.debug(f"[alerte] Ignor√©e (d√©j√† ouverte) : {message}")
        return existing_open

    # ‚è≥ 2) Cooldown : si une alerte similaire a √©t√© cr√©√©e r√©cemment (m√™me type, m√™me severit√©)
    #    on recr√©e l'alerte pour l'historique uniquement si tu le souhaites, mais SANS mail.
    last_similar = (
        Alert.query.filter_by(host_id=host_id, severity=severity)
        .filter(Alert.message.like(f"{first_word}%"))
        .order_by(Alert.created_at.desc())
        .first()
    )
    if last_similar and last_similar.created_at >= since:
        # Cooldown actif ‚Üí pas d'e-mail
        send_email = False
        logger.info(f"[alerte] ‚è±Ô∏è Cooldown actif ({cooldown_minutes} min) pour {hostname} ‚Äì pas d'e-mail.")

    # ‚úÖ 3) Cr√©ation de la nouvelle alerte (on conserve l'historique dans /alerts)
    alert = Alert(
        host_id=host_id,
        severity=severity,
        message=message,
        created_at=now
    )
    db.session.add(alert)
    db.session.commit()

    print(f"[alerte] üîî Nouvelle alerte {severity.upper()} sur {hostname} ({host_ip}) : {message}")

    # üìß 4) Envoi e-mail uniquement pour CRITICAL, et si cooldown non actif
    if send_email and severity == "critical":
        subject = f"[CRITICAL] {hostname} ({host_ip}) ‚Äî Alerte SNMP"
        body = (
            f"Une alerte critique a √©t√© d√©tect√©e :\n\n"
            f"H√¥te : {hostname} ({host_ip})\n"
            f"Gravit√© : {severity.upper()}\n"
            f"D√©tails : {message}\n"
        )
        send_alert_email(subject, body)

    return alert


def resolve_alert(db, Alert, host_id, category=None, message_contains=None):
    """
    Marque comme r√©solues les alertes ouvertes pour ce host (optionnellement filtr√©es),
    puis envoie un e-mail de r√©tablissement uniquement si une alerte critique √©tait concern√©e.
    """
    from models import Host
    host = Host.query.get(host_id)
    hostname = host.hostname if host else f"Host#{host_id}"
    host_ip = host.ip if host else "IP inconnue"

    q = Alert.query.filter(
        Alert.host_id == host_id,
        Alert.resolved_at.is_(None)
    )
    if message_contains:
        q = q.filter(Alert.message.like(f"%{message_contains}%"))

    alerts = q.all()
    if not alerts:
        return

    now = datetime.utcnow()
    severities = {a.severity for a in alerts}

    for a in alerts:
        a.resolved_at = now
        db.session.add(a)
    db.session.commit()

    print(f"[alerte] ‚úÖ {len(alerts)} alerte(s) r√©solue(s) pour host {host_id}")

    # üìß Envoi mail uniquement si une alerte critique √©tait concern√©e
    if "critical" in severities:
        subject = f"[R√âTABLIE] {hostname} ({host_ip}) ‚Äî Alerte critique r√©solue"
        details = "\n".join(f"- {a.severity.upper()} : {a.message}" for a in alerts)
        cat_line = f"Cat√©gorie : {category}\n" if category else ""
        body = (
            f"Les alertes suivantes ont √©t√© r√©solues :\n\n"
            f"H√¥te : {hostname} ({host_ip})\n"
            f"{cat_line}"
            f"{details}\n\n"
            f"R√©tablissement : {now} UTC"
        )
        send_alert_email(subject, body)

    print(f"[alerte] ‚úÖ {len(alerts)} alerte(s) r√©solue(s) pour host {host_id}")